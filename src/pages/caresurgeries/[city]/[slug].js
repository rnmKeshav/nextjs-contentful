import { createClient } from 'contentful';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../../../styles/Home.module.css'

const client = createClient({
  space: process.env.CONTENTFUL_SPACE_ID, // ID of a Compose-compatible space to be used \
  accessToken: process.env.CONTENTFUL_ACCESS_TOKEN, // delivery API key for the space \
});

export const getStaticPaths = async () => {
  const semPage = await client.getEntries({content_type: "semPage"});
  const citySpecialityMap = await client.getEntries({content_type: "citySpecialityMap"});
  const specialityAimentMap = await client.getEntries({content_type: "specialityAimentMap"});

  let {items: citySpecialities} = citySpecialityMap;

  /**
   * city -> speciality
   * speciality -> ailment
   * ailment -> related sem_pages
   */
  let citySpecialitiesAilmentSemPagesPromise = citySpecialities.map(async citySpeciality => {
    let {
      fields: {city, speciality, phoneNumber }
    } = citySpeciality;

    let {fields: {name: cityName, slug: citySlug}} = city;
    let {fields: {name: specialityName}, sys: {id: specialityId}} = speciality;

    const specialityAiments = await client.getEntries({
      content_type: "specialityAimentMap",
      'fields.speciality.sys.id': specialityId
    });

    /**
     * Each speciality can have multiple ailment 
     * Each ailment can have miltiple pages
     */
    // console.log(`specialityAiments for a ${cityName}`, specialityAiments);

    // Get SEM pages for the each ailment of speciality
    let pagesForAilmentsOfSpecialitiesPromise =  specialityAiments.items.map(async specialityAiment => {
      let {fields: {ailment}} = specialityAiment;

      // console.log("ailment", ailment);
      let {sys: {id: ailmentId}} = ailment;

      // Get SEM pages for the ailment
      const semPagesForAilment = await client.getEntries({
        content_type: "semPage",
        'fields.ailment.sys.id': ailmentId
      });

      // console.log("semPagesForAilment", semPagesForAilment.items);
      return semPagesForAilment;
    });

    let ailmentsForSpecialities = await Promise.all(pagesForAilmentsOfSpecialitiesPromise);
    // console.log("semPageDataForSpecialityAilments", ailmentsForSpecialities);
    
    
    // Each ailment can have multiple pages. Reducing it to remove the speciality data for which there are no ailments pages.
    // Taking all ailment pages at single level
    let ailmentPages = ailmentsForSpecialities.reduce((ailmentPages, ailmentsForSpeciality) => {
      // console.log("...ailmentsForSpeciality.items", ...ailmentsForSpeciality.items);
      let a= [...ailmentPages, ...ailmentsForSpeciality.items];
      // console.log("merged items", a);
      return a;
    }, [])

    // console.log("ailmentPages", ailmentPages);

    return {
      cityName,
      citySlug,
      ailmentPages
    };
  });

  let citySpecialitiesAilmentSemPages = await Promise.all(citySpecialitiesAilmentSemPagesPromise);
  // console.log("citySpecialitiesAilmentSemPages", citySpecialitiesAilmentSemPages);

  // let cityAilmentSemPages = citySpecialitiesAilmentSemPages.reduce((ailmentPages, specialitiesAilmentSemPages) => {
  //   let {cityName, ailmentPages} = specialitiesAilmentSemPages;

  //   return {
  //     cityName,

  //   }
  //   return [...ailmentPages, ...ailmentPages]
  // },[]);
  
  // console.log("cityAilmentSemPages", cityAilmentSemPages);
  let paths = [];
  citySpecialitiesAilmentSemPages.forEach(cityAilmentSemPage => {
    let {cityName, citySlug, ailmentPages} = cityAilmentSemPage;

    // let {fields: {slug}} = ailmentPages;

    ailmentPages.forEach(ailmentPage => {
      let {fields: {slug}} = ailmentPage;
      paths.push({
        params: {
          city: citySlug,
          slug
        }
      })
    })
  });

  console.log("paths", paths);
  console.log("*".repeat(30));
  // console.log("semPage", semPage.items[0].fields);
  // console.log("citySpecialityMap", citySpecialityMap.items[0].fields);
  // console.log("specialityAimentMap", specialityAimentMap.items[1].fields);

  return {
    paths,
    fallback: false
  }
}

export async function getStaticProps ({params}) {
  let {slug} = params;
  console.log("params", slug);
  // Get SEM pages for the ailment
  const semPagesForAilment = await client.getEntries({
    content_type: "semPage",
    'fields.slug': slug
  });

  console.log("semPagesForAilment", semPagesForAilment);

  let {fields: pageField} = semPagesForAilment.items[0];

  return {
    props: {
      fields: pageField
    }
  }
}

export default function AilmentPage ({fields}) {
  let {title, heroBannerImage: {fields: {file: {url, details:{image: {height, width}}}}}} = fields;

  return (
    <div className={styles.container}>
      <Head>
        <title>Hi this is dummy page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <h1>{title}</h1>
        <Image 
          src={`https:${url}`}
          width={width}
          height={height}
        ></Image>
        </div>
    </div>
  )
}